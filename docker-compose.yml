version: '3.8'

services:
# ‚úÖ MySQL
  mysql:
    container_name: team3-mysql
    build:
      context: ./mysql
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "13306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=1dlxoals!
      - TZ=Asia/Seoul
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/config:/etc/mysql/conf.d/source:ro
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/logs:/var/log/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1dlxoals!"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ‚úÖ ElasticSearch for Spring
  elasticsearch-service:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch-service
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"

  # ‚úÖ ElasticSearch for ML
  elasticsearch-ml:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch-ml
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9201:9200"

  # ‚úÖ Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch-service:9200"
    depends_on:
      - elasticsearch-service

  # ‚úÖ Spring Backend
  backend:
    build:
      context: ./ml-backend
      dockerfile: Dockerfile
    container_name: backend
    working_dir: /app
    ports:
      - "8081:8080"
    depends_on:
      - mysql
      - elasticsearch-service

  # ‚úÖ ML Backend (FastAPI)
  ml-backend:
    build:
      context: ./ml-backend-fastapi
      dockerfile: Dockerfile
    container_name: ml-backend
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch-ml

  # ‚úÖ Airflow DB
  airflow-db:
    image: postgres:13
    container_name: airflow-db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # ‚úÖ Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.0
    container_name: airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    command: bash -c "
      airflow db migrate &&
      airflow db upgrade &&
      airflow users create --username admin --password admin --firstname admin --lastname user --role Admin --email admin@example.com &&
      airflow webserver"
    volumes:
      - ./ml-backen-fastapi/airflow/dags:/opt/airflow/dags
    ports:
      - "8083:8080"
    depends_on:
      - airflow-db

 # ‚úÖ Jenkins (CI/CD ÏÑúÎ≤Ñ)
  jenkins:
    build:
      context: ./ml-backend-fastapi/jenkins_home  # üî• Ïó¨Í∏∞!!
      dockerfile: Dockerfile
    container_name: jenkins
    ports:
      - "8085:8080"    # Jenkins Ï†ëÏÜç Ìè¨Ìä∏
      - "50000:50000"  # ÏóêÏù¥Ï†ÑÌä∏ ÌÜµÏã† Ìè¨Ìä∏
    volumes:
      - ./ml-backend-fastapi/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped



  # ‚úÖ Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.0
    container_name: airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    command: bash -c "airflow scheduler"
    volumes:
      - ./ml-backen-fastapi/airflow/dags:/opt/airflow/dags
    depends_on:
      - airflow-db
      - airflow-webserver

volumes:
  airflow-db-volume:
  mysql-data:
    name: team3-mysql-data


 