x-airflow-common: &airflow-common-config
  networks:
    - airflow-network
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Seoul
    AIRFLOW__LOGGING__LOGGING_LEVEL: 'INFO'
    # AIRFLOW__API__AUTH_BACKEND_SECRET_KEY: '1dlxoals!'
    AIRFLOW__API_AUTH__JWT_SECRET: '1dlxoals!'
    TZ: Asia/Seoul
    PYTHONPATH: '/opt/airflow'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW_CONN_MY_ELASTICSEARCH: 'http://airflow-elasticsearch:9200'
    AIRFLOW_CONN_NOTICES_DB: 'mysql://admin:admin_password@host.docker.internal:13306/notice_db?charset=utf8mb4&local_infile=true'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/downloads:/opt/airflow/downloads
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config/
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    airflow-redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

# 경량 컴포넌트 (스케줄러, 트리거러, API 서버)용 공통 설정
x-airflow-light: &airflow-light
  <<: *airflow-common-config
  build:
    context: ./ml-backend-fastapi/airflow
    dockerfile: Dockerfile
    target: airflow-light

# 무거운 컴포넌트 (워커, DAG 프로세서)용 공통 설정
x-airflow-worker-full: &airflow-worker-full
  <<: *airflow-common-config
  build:
    context: ./ml-backend-fastapi/airflow
    dockerfile: Dockerfile
    target: airflow-worker-full


services:

# ✅ airflow  
  airflow-postgres:
    image: postgres:13
    networks:
      - airflow-network
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      TZ: Asia/Seoul
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      retries: 5
      start_period: 5s
    restart: always

  airflow-redis:
    # Redis는 라이선스 변경으로 인해 7.2-bookworm으로 제한됩니다
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    networks:
      - airflow-network
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-apiserver:
    <<: *airflow-light
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      airflow-scheduler:
        condition: service_healthy
      airflow-dag-processor:
        condition: service_healthy
      airflow-triggerer:
        condition: service_healthy
      
  airflow-scheduler:
    <<: *airflow-worker-full
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-light
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-worker-full
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-worker-full
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s     # 상태체크 간격
      timeout: 10s      # 응답 대기시간
      retries: 5
      start_period: 30s # 컨테이너 시작 후 대기시간
    environment:
      <<: *airflow-common-env
      # Celery 워커의 정상적인 종료 처리에 필요합니다
      # 참조: https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-light
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
    - -c
    - |
      if [[ -z "${AIRFLOW_UID}" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        echo "If you are on Linux, you SHOULD follow the instructions below to set "
        echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
        echo "For other operating systems you can get rid of the warning with manually created .env file:"
        echo "See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
        echo
        export AIRFLOW_UID=$(id -u)
      fi
      one_meg=1048576
      mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
      cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
      disk_available=$$(df / | tail -1 | awk '{print $$4}')
      warning_resources="false"
      if (( mem_available < 4000 )) ; then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
        echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
        echo
        warning_resources="true"
      fi
      if (( cpus_available < 2 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
        echo "At least 2 CPUs recommended. You have $${cpus_available}"
        echo
        warning_resources="true"
      fi
      if (( disk_available < one_meg * 10 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
        echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
        echo
        warning_resources="true"
      fi
      if [[ $${warning_resources} == "true" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
        echo "Please follow the instructions to increase amount of resources available:"
        echo "https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
        echo
      fi

      echo
      echo "Waiting for PostgreSQL to be ready..."
      until pg_isready -h airflow-postgres -p 5432 -U airflow; do
        echo "PostgreSQL is not ready yet. Waiting 5s..."
        sleep 5
      done
      echo "PostgreSQL is ready!"

      echo
      echo "Creating missing opt dirs if missing:"
      mkdir -v -p /opt/airflow/{logs,dags,plugins,config}

      echo
      echo "Airflow version:"
      /entrypoint airflow version

      echo
      echo "Files in shared volumes:"
      ls -la /opt/airflow/{logs,dags,plugins,config}

      echo
      echo "Running airflow config list to create default config file if missing."
      /entrypoint airflow config list >/dev/null

      echo
      echo "Files in shared volumes:"
      ls -la /opt/airflow/{logs,dags,plugins,config}

      echo
      echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
      chown -R "${AIRFLOW_UID}:0" /opt/airflow/

      echo
      echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
      chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}

      echo
      echo "Files in shared volumes:"
      ls -la /opt/airflow/{logs,dags,plugins,config}
    depends_on:
      <<: *airflow-common-depends-on
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'                                             # 데이터베이스 마이그레이션을 자동으로 실행
      _AIRFLOW_WWW_USER_CREATE: 'true'                                        # 웹 사용자 자동 생성
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}      # 웹 사용자 이름
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}      # 웹 사용자 비밀번호
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  # Airflow 크롤링을 위한 Selenium
  airflow-selenium:
    image: selenium/standalone-chrome:4
    networks:
      - airflow-network
    ports:
      - "4444:4444"
    volumes:
      - /dev/shm:/dev/shm
    environment:
      - SE_EVENT_BUS_HOST=selenium
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - TZ=Asia/Seoul
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4444/wd/hub/status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Airflow를 위한 ElasticSearch
  airflow-elasticsearch:
    image: elasticsearch:8.8.0
    networks:
      - airflow-network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9202:9200"
    restart: always

  # airflow-elasticsearch를 위한 Kibana
  airflow-kibana:
    image: kibana:8.8.0
    networks:
      - airflow-network
    environment:
      - ELASTICSEARCH_HOSTS=http://airflow-elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "5605:5601"
    depends_on:
      - airflow-elasticsearch
    restart: always

  airflow-cli:
    <<: *airflow-light
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # 엔트리포인트 이슈에 대한 해결책. 참조: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on

  # flower를 활성화하려면 "--profile flower" 옵션을 추가할 수 있습니다. 예: docker-compose --profile flower up
  # 또는 명령줄에서 명시적으로 지정할 수도 있습니다. 예: docker-compose up flower.
  # 참조: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-light
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # MySQL
  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    # restart: unless-stopped
    ports:
      - "13306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=1dlxoals!
      - TZ=Asia/Seoul
    volumes:
      - ./mysql/config:/etc/mysql/conf.d
      - mysql-db-volume:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/logs:/var/log/mysql:rw
    healthcheck:  
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1dlxoals!" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ✅ ElasticSearch for Spring
  elasticsearch-service:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch-service
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
  
  # ✅ ElasticSearch for ML
  elasticsearch-ml:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch-ml
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9201:9200"

  # ✅ Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch-service:9200"
    depends_on:
      - elasticsearch-service

  # ✅ Spring Backend
  backend:
    build:
      context: ./ml-backend
      dockerfile: Dockerfile
    container_name: backend
    working_dir: /app
    ports:
      - "8081:8080"
    depends_on:
      - mysql
      - elasticsearch-service

  # ✅ ML Backend (FastAPI)
  ml-backend:
    build:
      context: ./ml-backend-fastapi
      dockerfile: Dockerfile
    container_name: ml-backend
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch-ml

  # ✅ Jenkins (CI/CD 서버)
  jenkins:
    build:
      context: ./ml-backend-fastapi/jenkins_home # 🔥 여기!!
      dockerfile: Dockerfile
    container_name: jenkins
    ports:
      - "8085:8080" # Jenkins 접속 포트
      - "50000:50000" # 에이전트 통신 포트
    volumes:
      - ./ml-backend-fastapi/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped


# 명시적인 네트워크 정의
networks:
  airflow-network:


volumes:
  # Airflow용 DB 볼륨
  postgres-db-volume:
    name: team3-postgres-db-volume
  # MySQL 데이터 볼륨
  mysql-db-volume:
    name: team3-mysql-db-volume

