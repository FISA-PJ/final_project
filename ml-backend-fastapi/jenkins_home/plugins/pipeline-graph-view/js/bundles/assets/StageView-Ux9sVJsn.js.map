{"version":3,"mappings":"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","names":["agent","agentName","name","id","jsxs","href","jsx","stage","exact","Started","Paused","Dropdown","__vitePreload","props","useEffect","handleToggle","e","showMoreLogs","LOG_FETCH_SIZE","startByte","prettySizeString","size","classNames","StatusIcon"],"ignoreList":[],"sources":["../../../../frontend/pipeline-console-view/pipeline-console/main/StageNodeLink.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/stage-details.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx"],"sourcesContent":["import React from \"react\";\n\nexport default function StageNodeLink({ agent }: StageNodeLinkProps) {\n  if (!agent) {\n    return null;\n  }\n\n  const agentName = agent === \"built-in\" ? \"Jenkins\" : agent;\n  const href = getAgentUrl(agent);\n\n  function getAgentUrl(name: string) {\n    // Wrap built-in in brackets\n    const id = name === \"built-in\" ? \"(built-in)\" : name;\n    const rootPath = document.head.dataset.rooturl;\n    return `${rootPath}/computer/${id}/`;\n  }\n\n  return (\n    <li>\n      <a\n        href={href}\n        className={\"jenkins-button jenkins-button--tertiary\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <svg\n          width=\"512px\"\n          height=\"512px\"\n          viewBox=\"0 0 512 512\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            strokeLinejoin=\"round\"\n          >\n            <g\n              transform=\"translate(32.000000, 64.000000)\"\n              stroke=\"currentColor\"\n              strokeWidth=\"32\"\n            >\n              <rect x=\"0\" y=\"0\" width=\"448\" height=\"320\" rx=\"32\" />\n              <polygon\n                strokeLinecap=\"round\"\n                fillRule=\"nonzero\"\n                points=\"272 384 264 320 184 320 176 384\"\n              />\n              <line x1=\"336\" y1=\"384\" x2=\"112\" y2=\"384\" strokeLinecap=\"round\" />\n            </g>\n          </g>\n        </svg>\n        {agentName}\n      </a>\n    </li>\n  );\n}\n\ninterface StageNodeLinkProps {\n  agent?: string;\n}\n","import React from \"react\";\nimport { StageInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/index.ts\";\nimport \"./stage-details.scss\";\nimport StageNodeLink from \"./StageNodeLink.tsx\";\nimport StatusIcon, {\n  resultToColor,\n} from \"../../../common/components/status-icon.tsx\";\nimport {\n  exact,\n  Paused,\n  Started,\n  Total,\n} from \"../../../common/utils/timings.tsx\";\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\n\nexport default function StageDetails({ stage }: StageDetailsProps) {\n  if (!stage) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        \"pgv-stage-details \" + resultToColor(stage.state, stage.skeleton)\n      }\n    >\n      {stage.state === \"running\" && (\n        <div className={\"pgv-stage-details__running\"} />\n      )}\n      <div>\n        <StatusIcon\n          status={stage.state}\n          skeleton={stage.skeleton}\n          percentage={stage.completePercent}\n        />\n        <h2>{stage.name}</h2>\n      </div>\n      <ul>\n        <li>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              d=\"M112.91 128A191.85 191.85 0 0064 254c-1.18 106.35 85.65 193.8 192 194 106.2.2 192-85.83 192-192 0-104.54-83.55-189.61-187.5-192a4.36 4.36 0 00-4.5 4.37V152\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M233.38 278.63l-79-113a8.13 8.13 0 0111.32-11.32l113 79a32.5 32.5 0 01-37.25 53.26 33.21 33.21 0 01-8.07-7.94z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          <Total ms={stage.totalDurationMillis} />\n        </li>\n        <li>\n          <Tooltip content={exact(stage.startTimeMillis)}>\n            <span>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path\n                  d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"32\"\n                />\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"32\"\n                  d=\"M256 128v144h96\"\n                />\n              </svg>\n              <Started since={stage.startTimeMillis} />\n            </span>\n          </Tooltip>\n        </li>\n        {stage.pauseDurationMillis !== 0 && (\n          <li>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M145.61 464h220.78c19.8 0 35.55-16.29 33.42-35.06C386.06 308 304 310 304 256s83.11-51 95.8-172.94c2-18.78-13.61-35.06-33.41-35.06H145.61c-19.8 0-35.37 16.28-33.41 35.06C124.89 205 208 201 208 256s-82.06 52-95.8 172.94c-2.14 18.77 13.61 35.06 33.41 35.06z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n              <path\n                d=\"M343.3 432H169.13c-15.6 0-20-18-9.06-29.16C186.55 376 240 356.78 240 326V224c0-19.85-38-35-61.51-67.2-3.88-5.31-3.49-12.8 6.37-12.8h142.73c8.41 0 10.23 7.43 6.4 12.75C310.82 189 272 204.05 272 224v102c0 30.53 55.71 47 80.4 76.87 9.95 12.04 6.47 29.13-9.1 29.13z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n            <Paused since={stage.pauseDurationMillis} />\n          </li>\n        )}\n        <StageNodeLink agent={stage.agent} />\n        <li>\n          <Dropdown\n            disabled={stage.synthetic}\n            items={[\n              {\n                text: \"View stage as plain text\",\n                icon: (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path\n                      d=\"M416 221.25V416a48 48 0 01-48 48H144a48 48 0 01-48-48V96a48 48 0 0148-48h98.75a32 32 0 0122.62 9.37l141.26 141.26a32 32 0 019.37 22.62z\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                    <path\n                      d=\"M256 56v120a32 32 0 0032 32h120M176 288h160M176 368h160\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                  </svg>\n                ),\n                href: `log?nodeId=${stage.id}`,\n                target: \"_blank\",\n              },\n              {\n                text: \"Download stage logs\",\n                icon: (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path\n                      d=\"M336 176h40a40 40 0 0140 40v208a40 40 0 01-40 40H136a40 40 0 01-40-40V216a40 40 0 0140-40h40\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                    <path\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                      d=\"M176 272l80 80 80-80M256 48v288\"\n                    />\n                  </svg>\n                ),\n                href: `log?nodeId=${stage.id}`,\n                download: `${stage.name}.txt`,\n              },\n            ]}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\ninterface StageDetailsProps {\n  stage: StageInfo | null;\n}\n","import React, { useEffect, Suspense } from \"react\";\nimport \"./console-log-card.scss\";\n\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\n\nconst ConsoleLogStream = React.lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nexport default function ConsoleLogCard(props: ConsoleLogCardProps) {\n  useEffect(() => {\n    if (props.isExpanded) {\n      props.onMoreConsoleClick(props.step.id, props.stepBuffer.startByte);\n    }\n  }, [props.isExpanded]);\n\n  const handleToggle = (e: React.MouseEvent<HTMLElement>) => {\n    // Only prevent left clicks\n    if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    history.replaceState({}, \"\", `?selected-node=` + props.step.id);\n\n    props.onStepToggle(props.step.id);\n  };\n\n  const showMoreLogs = () => {\n    let startByte = props.stepBuffer.startByte - LOG_FETCH_SIZE;\n    if (startByte < 0) startByte = 0;\n    props.onMoreConsoleClick(props.step.id, startByte);\n  };\n\n  const getTruncatedLogWarning = () => {\n    if (props.stepBuffer.lines && props.stepBuffer.startByte > 0) {\n      return (\n        <button\n          onClick={showMoreLogs}\n          className={\n            \"pgv-show-more-logs jenkins-button jenkins-!-warning-color\"\n          }\n        >\n          There’s more to see - {prettySizeString(props.stepBuffer.startByte)}{\" \"}\n          of logs hidden\n        </button>\n      );\n    }\n    return undefined;\n  };\n\n  const prettySizeString = (size: number) => {\n    const kib = 1024;\n    const mib = 1024 * 1024;\n    const gib = 1024 * 1024 * 1024;\n    if (size < kib) return `${size}B`;\n    if (size < mib) return `${(size / kib).toFixed(2)}KiB`;\n    if (size < gib) return `${(size / mib).toFixed(2)}MiB`;\n    return `${(size / gib).toFixed(2)}GiB`;\n  };\n\n  return (\n    <div className={\"pgv-step-detail-group\"} key={`step-card-${props.step.id}`}>\n      <div\n        className={classNames(\"pgv-step-detail-header\", \"jenkins-button\", {\n          \"jenkins-button--tertiary\": !props.isExpanded,\n        })}\n      >\n        <a\n          href={`?selected-node=` + props.step.id}\n          onClick={handleToggle}\n          key={`step-action-area-${props.step.id}`}\n        >\n          <div className=\"pgv-step-detail-header__content\">\n            <StatusIcon\n              status={props.step.state}\n              percentage={props.step.completePercent}\n            />\n\n            {props.step.title !== \"\" && <span>{props.step.title}</span>}\n\n            {props.step.name !== \"\" && <span>{props.step.name}</span>}\n\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n              className={\"pgv-step-detail-header__chevron\"}\n              style={{ rotate: props.isExpanded ? \"90deg\" : \"0deg\" }}\n            >\n              <path\n                fill=\"none\"\n                stroke=\"var(--text-color-secondary)\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                opacity={0.75}\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </div>\n\n          <div className=\"pgv-step-detail-header__actions\">\n            <span\n              style={{\n                color: \"var(--text-color-secondary)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              <Total ms={props.step.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        <Tooltip content={\"View step as plain text\"}>\n          <a\n            href={`log?nodeId=${props.step.id}`}\n            className={\"jenkins-button jenkins-button--tertiary\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M384 224v184a40 40 0 01-40 40H104a40 40 0 01-40-40V168a40 40 0 0140-40h167.48M336 64h112v112M224 288L440 72\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n            </svg>\n          </a>\n        </Tooltip>\n      </div>\n\n      {props.isExpanded && (\n        <div style={{ paddingTop: \"0.5rem\" }}>\n          {getTruncatedLogWarning()}\n          <Suspense>\n            <ConsoleLogStream\n              logBuffer={props.stepBuffer}\n              onMoreConsoleClick={props.onMoreConsoleClick}\n              step={props.step}\n              maxHeightScale={0.65}\n            />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n};\n"],"file":"assets/StageView-Ux9sVJsn.js"}